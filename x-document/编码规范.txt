
遵守python语法规则:

编写用例核心三个点：
1，入门门槛低
2，编写加调试效率高
3，维护成本低

编写用例规则:
命名规则：小驼峰命名法,类名大驼峰;
测试用例命名规则:test+[01~99]+用例编号,例如：用例编号是：SRM-LOGIN-001，那么用例的文件名称是：testSRM-LOGIN-001.py;
              如果一个逻辑可以覆盖多个用例，那么这个用例的文件命名为：test用例编号+用例编号;
              例如一个逻辑可覆盖SRM-LOGIN001到SRM-LOGIN005，SRM-LOGIN007和SRM-LOGIN010，那么命名为：testSRM-LOGIN001~005-007-010.py;
测试用例数据: 一个逻辑可覆盖两条及以上用例，使用yaml文件配置不同用例参数，yaml文件名称和用例名称保持一致
            文件内每条数据：用例编号-用例名称。
前后置方法命名为：presetAndReset():详见readme.txt-case分层
执行体命名为：testExecCase():
前后置注释: 前后置中需要按照步骤,例如有三步,其中第一步是在模块级中实现,第二部在类前置中实现,第三步在本函数上实现,那么注释为:
           # preset1 步骤描述 在"路径+文件名"中的"xxx"方法中;
           # preset2 步骤描述 在"类名"前置中的"xxx"方法中;
           # preset3 步骤描述 在本注释下实现
           preset3 前置实现
           yield
           # reset1
           reset1 实现
           # reset2
           reset2 实现

用例中注释: 按照测试用例的步骤注释,例如用例有3步
           # step1: 步骤描述
           代码实现
           # step2: 步骤描述
           代码实现
           # step3: 步骤描述
           代码实现
参数注释:   # param 参数名称 参数含义;
           例如 param companyId 公司Id

打印输出: 使用zPrint()便于全局控制,较少跑用例的时间,使用方法 import globalImport中的zPrint方法即可

注意事项:跑前开启vpn(获取验证码,)需要

2023-02-08

用例模板
导入
公共参数
前后置方法
执行体

提交代码前必须先拉取代码
代码提交格式：
提交类型：说明提交改动了哪里
如：
fix:修复XX脚本问题
fix:修改XX取值逻辑
feat:增加XX单接口
feat:增加XX按钮/校验点
refactor:重构XX按钮/单接口
docs:XX会议纪要

